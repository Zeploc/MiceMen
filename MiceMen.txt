Naming
- MM_
- BP_MM
- MM_UI
- BP_MM_UI

Todo Formatting:
- Comments above ifs explaining what they are checking
- Functions returning bool that are confusing bool return
- Commenting clear
Functions
-Does it tell me what it actually does
-Does it do just that, or is there other things it is doing as well
Move static functions to helper utils?

Todo:
- AI Advanced turn column instantly moves instead of lerp (not in shipping?)
- Turns completed in [number]

Visual/Gameplay
- Need visuals for columns that can't be moved, ie same column moved or 6 times in a row
- Arrows on top and bottom show when hover
- Arrows change when snapping to new position (hide/ only show other direction)
- When dragging visualise element that wraps around
- Mouse trail link to mouse colour
- Bounce visual jumping on another mouses head
- Sound effects
Stretch:
- Mouse Characters
- Jump/walk animations
- Timeline visuals for blocks moving
- Idle/fidget animations

-----------------------------------------------------------------------
To put in readme:
- Controls (+ debug grid - Not in shipping)
- Logging system (could cause editor lag)
- Controller/local player setup
- Unique situations found and solved (stalemate, non falling mouse, blocked columns)
- Pragma Region explanation (collapse/expand)
- Event log for debugging - Log Macro, Add location (place in code called) in macro + object
- Sparseness explain

- Singleton
- Set gameplay modes info in singleton, with display name and description

- AI advanced could account for when no direct good moves occur
- AI advanced could account for other players to not move them, or to block them
- Had AI delay times for thinking and moving
- Seperated AI logic into grid cheaper instance and process in separate thread to have more complicated AI

- Possible testing situations
- Add test to see if all mice that completed were correctly scored

- UI control starting mice in gameplay
- UI control grid size in game

Todo:
- Debug methods
- Further decisions for if networked
- Things not addressed
- Things I would have done further

Gamemode
- Handles turns
- Setup grid Manager

Grid Manager
- Creates grid Elements
- Grid Rebuild
- Grid interaction with gameplay elements

Grid object
- Grid - Array<GridInfo> Columns by rows (x by y)
- Handles & Updates Grid
- Store free slots as map, updated on change (reduce iteration)
- Grid Cleanup


Gameplay Elements
- Cheese/Block Actor
- Mouse Actor - Not a pawn/character

Pawn
- Gameplay Interaction
- View

Player Controller
- UI control
- Local player per side
- Begin Turn function

UI
- Base in code, bind widgets


UI/Game loop
- Difficulty - easy/hard
- AI vs local player
- Grid Size (default, custom sliders)
- Sandbox mode, single player move grid around


Fun Ides to expand on:
- Mice/player can have abilities/power ups (like worms) such as
	- borrow through a cheese block
	- Jump up a cheese block
	- Teleport through
	- Swap places with another mice? Might be counter intuitive
	- Move a collumn more than 1 slot
	- Move more than one collumn
	- Skip a players turn
- Larger/smaller maps
- 
